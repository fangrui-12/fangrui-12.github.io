<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java笔记</title>
    <link href="/2022/09/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/java%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1>1 java概述</h1><h2 id="1-1-转义字符">1.1 转义字符</h2><ul><li>\t 一个制表位，实现对齐功能</li><li>\n 换行</li><li>\\ 一个\</li><li>\&quot; 一个“</li><li>\r 回车</li></ul><h2 id="1-2-注释">1.2 注释</h2><ul><li><p>单行注释：//注释文字</p></li><li><p>多行注释： /<em>注释文字</em>/</p></li><li><p>文档注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@author</span></span><br><span class="hljs-comment">  * <span class="hljs-doctag">@version</span></span><br><span class="hljs-comment">  */</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="1-3-代码规范">1.3 代码规范</h2><ul><li>类、方法的注释，要以javadoc的方式来写</li><li>注释详细，着重告诉读者为什么这样写，如何修改，注意什么文问题等</li><li>使用tab、shift+tab</li><li>运算符和 = 两边习惯性各加一个空格</li><li>源文件使用utf-8编码</li><li>行宽度不要超过80字符</li><li>代码编写此行风格和行尾风格</li></ul><h2 id="1-4-JDK-JRE">1.4 JDK JRE</h2><ul><li>JDK(java开发工具包)</li><li>JDK = JRE + java开发工具包</li><li>JRE = JVM + java核心类库</li><li>JVM(java虚拟机)</li></ul><h1>2 变量</h1><h2 id="2-1-变量">2.1 变量</h2><ul><li><strong>基本介绍</strong><br>变量相当于内存中一个数据存储空间的表示，可以把变量看作是一个房间的门牌号，通过门牌号可以找到房间，通过变量名可以访问到变量（值)</li><li>注意事项和细节<ol><li>变量表示内存在的一个存储区域（不同的变量，类型不同，占用的空间大小不同）</li><li>该区域有自己的名称 （变量名）和类型（数据类型）</li><li>变量必须先声明，后使用，即有顺序</li><li>还区域的数据可以在同一类型范围内不断变化</li><li>变量在同一个作用域内不能重名</li><li>变量 = 变量名 + 值 + 数据类型</li></ol></li></ul><h2 id="2-2基本数据类型">2.2基本数据类型</h2><ul><li>整数类型（byte[1] short[2] int[4] long[8]）<ol><li>java的整型变量（具体值）默认为int型，声明long型常量须后加’l’或’L’</li><li>java程序中变量声明为int型，除非不足以表示大树，才使用long</li><li>bit：计算机中的最小存储单位， byte：计算机中基本存储单元，1byte = 8bit</li></ol></li><li>浮点（小数）类型（float[4] double[8]）<ol><li>浮点数=符号位+指数位+位数位</li><li>尾部可能丢失，造成精度损失</li><li>java的浮点型常量（具体值）默认位double型，声明float型常量，须后加 'f’或 ‘F’</li><li>十进制形式：5.12  512.0f（须有小数点）<br>科学计数法形式：5.12e2  5.12E-2</li><li>通常情况下默认使用double</li></ol></li><li>字符型（char[2]）<ol><li>使用单引号表示（’ '）</li><li>java中还允许使用转义字符来将其后的字符转变为特殊字符型常量</li><li>char的本质是一个整数。输出时时Unicode码对应字符</li><li>char类可以进行运算</li></ol></li><li>布尔型（boolean[1]）<ol><li>boolean类型数据只允许取值true和false，无null</li><li>boolean类型只占一个字节</li><li>不可以用0或非0的整数代替false和true，与c语言不同</li></ol></li></ul><h2 id="2-3-基本数据类型转化">2.3 基本数据类型转化</h2><h3 id="2-3-1-自动类型转换">2.3.1 自动类型转换</h3><ul><li><p>基本介绍<br>java程序在进行赋值或者运算时，精确度小的类型自动转换为精度大的数据类型</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure></li><li><p>转换规则</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   char&lt;int&lt;long&lt;float&lt;double</span><br><span class="hljs-comment">   byte&lt;short&lt;int&lt;long&lt;float&lt;double</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li><li><p>注意事项和细节\</p><ol><li>有多种类型的数据混合运算时，系统首先自动将所有数据转换容量最大的那种数据类型，在进行计算</li><li>我们把精度(容量)⼤的数据类型赋值给精度(容量)⼩ 的数据类型时，就会报错，反之就会进⾏⾃动类型转换</li><li>byte short char 之间不会相互转换</li><li>byte short char 计算是⾸先转换为int类型</li><li>boolean不参与转换</li><li>⾃动提升原则：表达式结果的类型⾃动提升为操作数中最⼤的类型</li></ol></li></ul><h3 id="2-3-2-强制类型转换">2.3.2 强制类型转换</h3><ul><li><p>基本介绍\</p><p>⾃动类型转换的逆过程，将容量⼤的数据类型转换为容量⼩的数据类型。使⽤时要加上强制转换符()，但可能造成精度降低或溢出，格外要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">8.8</span>;<br>System.out.println(i);<br></code></pre></td></tr></table></figure></li><li><p>注意事项和细节</p><ol><li><p>当数据类型从精度大→小，就需要使用是强制转换</p></li><li><p>强转符号只针对于最近的操作数有效，往往会使用小括号提升优先级</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-type">int</span>(<span class="hljs-number">10</span>*<span class="hljs-number">3.5</span>+<span class="hljs-number">6</span>*<span class="hljs-number">1.5</span>);<br></code></pre></td></tr></table></figure></li><li><p>char类型可以保存int的常量值，但不能保存int的变量值，需要强转</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> m;<span class="hljs-comment">//false</span><br><span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)m;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li><li><p>byte short char 类型在进行运算时，当作int类型处理</p></li></ol></li></ul><h2 id="2-4-基本数据类型和String类型转换">2.4 基本数据类型和String类型转换</h2><ul><li><p>基本数据类型转String类型<br>语法：将基本类型的值 +“”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1f</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.4</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> n1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> n2 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> n3 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> b1 + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>String类型转基本数据类型<br>语法：通过基本数据类型的包装类调用parseXX方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> InterInt.parseInt(s5);<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> InterInt.parseDouble(s5);<br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> InterInt.parseFloat(s5);<br></code></pre></td></tr></table></figure></li></ul><h1>3 运算符</h1><h2 id="3-1-算数运算符">3.1 算数运算符</h2><ul><li><p>基本介绍\</p><p>算数运算符是对数值类型的变量进行运算的</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo_fluid_用户手册</title>
    <link href="/2022/09/11/hexo-fluid-%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/index/"/>
    <url>/2022/09/11/hexo-fluid-%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C/index/</url>
    
    <content type="html"><![CDATA[<p>详细操作方法请看 <a href="https://hexo.fluid-dev.com/docs/">https://hexo.fluid-dev.com/docs/</a></p><h1>标题部分</h1><p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">tag:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">categories:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">data:</span> <span class="hljs-string">××××-××-××</span> <span class="hljs-string">××:××:××</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span>  <span class="hljs-comment">#sticky 数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h2 id="分类和标签">分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><h3 id="分类方法的分歧">分类方法的分歧</h3><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">categories</span>:<br><span class="hljs-literal">-</span> [Diary, PlayStation]<br><span class="hljs-literal">-</span> [Diary, Games]<br><span class="hljs-literal">-</span> [Life]<br></code></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： PlayStation 和 Games 分别都是父分类 Diary 的子分类，同时 Life 是一个没有子分类的分类。</p>]]></content>
    
    
    
    <tags>
      
      <tag>fluid使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2022/09/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/09/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1>这是我的第一篇博客</h1><h2 id="Java学习">Java学习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.ptintln(<span class="hljs-string">&quot;hello world&quot;</span>;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hell0-world</title>
    <link href="/2022/09/11/hello-world/"/>
    <url>/2022/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>新文章</title>
    <link href="/2022/09/10/%E6%96%B0%E6%96%87%E7%AB%A0/"/>
    <url>/2022/09/10/%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
